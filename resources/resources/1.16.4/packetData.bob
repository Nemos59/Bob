//-----------------------------
// This file is used to tell Bob how a packet
// is stored and how it should be read.
// Proper writing about this will be made once Bob is finished.
// It will allow you to implement your own custom packets.
//-----------------------------

// Spawn Entity
00: {
    varint "Entity ID"
    uuid "Object UUID"
    varint "Type"
    double "X"
    double "Y"
    double "Z"
    angle "Pitch"
    angle "Yaw"
    int "Data"
    short "Velocity X"
    short "Velocity Y"
    short "Velocity Z"
}

69: {
    int "value"
    match "value" {
        0 => {
            int "test match 0"
        }

        3 => {
            int "test match 0"
        }

        5 => {
            int "test match 5"
        }
    }

    array "value" [
        int "test array"
    ]

    if "value" == 3 {
        int "test if"
    }
    
    int["value"] => "test one line array"
}

// Spawn Experience Orb
01: {
    varint "Entity ID"
    double "X"
    double "Y"
    double "Z"
    short "Count"
}

// Spawn Living Entity
02: {
    varint "Entity ID"
    uuid "Object UUID"
    varint "Type"
    double "X"
    double "Y"
    double "Z"
    angle "Pitch"
    angle "Yaw"
    angle "Head Pitch"
    short "Velocity X"
    short "Velocity Y"
    short "Velocity Z"
}

// Spawn Painting
03: {
    varint "Entity ID"
    uuid "Entity UUID"
    varint "Motive"
    position "Location"
    byte "Direction"
}

// Spawn Player
04: {
    varint "Entity ID"
    uuid "Player UUID"
    double "X"
    double "Y"
    double "Z"
    byte "Yaw"
    byte "Pitch"
}

// Entity Animation
05: {
    varint "Entity ID"
    byte "Animation"
}

// Statistics
06: {
    varint "Count"
    array "Count" [
        varint "Category ID"
        varint "Statistic ID"
        varint "Value ID"
    ]
}

// Acknowledge Player Digging
07: {
    position "Location"
    varint "Block"
    varint "Status"
    boolean "Successful"
}

// Block Break Animation
08: {
    varint "Entity ID"
    position "Location"
    byte "Destroy Stage"
}

// Block Entity Data
09: {
    position "Location"
    byte "Action"
    nbt "NBT Data"
}

// Block Action
0A: {
    position "Location"
    byte "Action ID"
    byte "Action Param"
    varint "Block Type"
}

// Block Change
0B: {
    position "Location"
    varint "Block ID"
}

// Boss Bar
0C: {
    uuid "UUID"

    varint "Action"
    match "Action" {
        0 => { // add
            chat "Title"
            float "Health"
            varint "Color"
            varint "Division"
            byte "Flags"
        }

        //1 => { // remove
        //}

        2 => { // update health
            float "Health"
        }

        3 => { // update title
            chat "Title"
        }

        4 => { // update style
            varint "Color"
            varint "Dividers"
        }

        5 => { // update flags
            byte "Flags"
        }
    }
}

// Server Difficulty
0D: {
    byte "Difficulty"
    boolean "Difficulty Locked?"
}

// Chat Message
0E: {
    chat "JSON Data"
    byte "Position"
    uuid "Sender"
}

// Tab-Complete
// Declare Commands
// Window Confirmation
// Close Window
// Window Items
// Window Property
// Set Slot
// Set Cooldown
// Plugin Message

// Named Sound Effect
18: {
    identifier "Sound Name"
    varint "Sound Category"
    int "Effect Position X"
    int "Effect Position Y"
    int "Effect Position Z"
    float "Volume"
    float "Pitch"
}

// Disconnect
// might not be useful to keep
19: {
    chat "Reason"
}

// Entity Status
1A: {
    int "Entity ID"
    byte "Entity Status"
}

// Explosion
1B: {
    float "X"
    float "Y"
    float "Z"
    float "Strength"

    int "Record Count"
    array "Record Count" [
        byte "Record X"
        byte "Record Y"
        byte "Record Z"
    ]

    float "Player Motion X"
    float "Player Motion Y"
    float "Player Motion Z"
}

// Unload Chunk
// might not be useful to keep
1C: {
    int "Chunk X"
    int "Chunk Z"
}

// Open Horse Window
// Keep Alive

// Chunk Data
20: {
    int "Chunk X"
    int "Chunk Z"
    boolean "Full Chunk"
    varint "Primary Bit Mask"
    nbt "Heightmaps"

    if "Full Chunk" {
        varint "Biomes Length"
        varint["Biomes Length"] => "Biomes"
        //array "Biomes Length" [
        //    varint "Biomes"
        //]
    }

    varint "Size"
    byte["Size"] => "Data"

    varint "Number of block Entities"
    nbt["Number of block Entities"] => "Block Entities"
    //array "Number of block Entities" [
    //    nbt "Block Entities"
    //]
}

// Effect
21: {
    int "Effect ID"
    position "Location"
    int "Data"
    boolean "Disable Relative Volume"
}

// Particle
22: {
    int "Particle ID"
    boolean "Long Distance"
    double "X"
    double "Y"
    double "Z"
    float "Offset X"
    float "Offset Y"
    float "Offset Z"
    float "Particle Data"
    int "Particle Count"

    match "Particle ID" {
        3 => {
            varint "BlockState"
        }
        
        23 => {
            varint "BlockState"
        }

        32 => {
            boolean "Present"
            if "Present" {
                varint "Item ID"
                byte "Item Count"
                nbt "NBT"
            }
        }
    }
}

// Update Light
23: {
    varint "Chunk X"
    varint "Chunk Z"
    boolean "Trust Edges"

    varint "Sky Light Mask"
    varint "Block Light Mask"
    
    varint "Empty Sky Light Mask"
    varint "Empty Block Light Mask"

    varint "SLA Length"
    byte["SLA Length"] => "SLA Array"

    varint "BLA Length"
    byte["BLA Length"] => "BLA Array"
}

// Join Game
24: {
    int "Entity ID"
    boolean "Is Hardcore"
    byte "Gamemode"
    byte "Previous Gamemode"
    
    varint "World Count"
    identifier["World Count"] => "World Names"

    nbt "Dimension Codec"
    nbt "Dimension"

    identifier "World Name"
    long "Hashed Seed"
    varint "Max Players"
    varint "View Distance"

    boolean "Reduced Debug Info"
    boolean "Enable Respawn Screen"
    boolean "Is Debug"
    boolean "Is Flat"
}

// Map Data
25: {
    varint "Map ID"
    byte "Scale"
    boolean "Tracking Position"
    boolean "Locked"
    
    varint "Icon Count"
    array "Icon Count" [
        varint "Type"
        byte "X"
        byte "Z"
        byte "Direction"

        boolean "Has Display Name"
        if "Has Display Name" {
            chat "Display Name"
        }
    ]

    byte "Columns"
    if "Columns" > 0 {
        byte "Rows"
        byte "X"
        byte "Z"

        varint "Length"
        byte["Length"] => "Data"
    }
}

// Trade List

// Entity Position
27: {
    varint "Entity ID"
    short "Delta X"
    short "Delta Y"
    short "Delta Z"
    boolean "On Ground"
}

// Entity Position and Rotation
28: {
    varint "Entity ID"
    short "Delta X"
    short "Delta Y"
    short "Delta Z"
    angle "Yaw"
    angle "Pitch"
    boolean "On Ground"
}

// Entity Rotation
29: {
    varint "Entity ID"
    angle "Yaw"
    angle "Pitch"
    boolean "On Ground"
}

// Entity Movement
2A: {
    varint "Entity ID"
}

// Vehicle Move
2B: {
    double "X"
    double "Y"
    double "Z"
    float "Yaw"
    float "Pitch"
}

// Open Book
// Open Window
// Open Sign Editor
// Craft Recipe Response

// Player Abilities
30: {
    byte "Flags"
    float "Flying Speed"
    float "Field of View Modifier"
}

// Combat Event
31: {
    varint "Event"
    match "Event" {
        //0 => { // enter combat (no fields)
        //}

        1 => { // end combat
            varint "Duration"
            int "Entity ID"
        }
        
        2 => { // entity dead
            varint "Player ID"
            int "Entity ID"
            chat "Message"
        }
    }
}

// Player Info
32: {
    varint "Action"

    varint "Number of Players"
    array "Number of Players" [
        uuid "UUID"
        match "Action" {
            0 => { // add player
                string "Name"

                varint "Number of Properties"
                array "Number of Properties" [
                    string "Name"
                    string "Value"

                    boolean "Is Signed"
                    if "Is Signed" {
                        string "Signature"
                    }
                ]

                varint "Gamemode"
                varint "Ping"

                boolean "Has Display Name"
                if "Has Display Name" {
                    chat "Display Name"
                }
            }

            1 => { // update gamemode
                varint "Gamemode"
            }

            2 => { // update latency
                varint "Ping"
            }

            3 => { // update display name
                boolean "Has Display Name"
                if "Has Display Name" {
                    chat "Display Name"
                }
            }

            //4 => { // remove player (has no fields)
            //}
        }
    ]
}

// Face Player
33: {
    varint "Feet/eyes" // feet=0, eyes=1
    double "Target X"
    double "Target Y"
    double "Target Z"

    boolean "Is Entity"
    if "Is Entity" {
        varint "Entity ID"
        varint "Entity feet/eyes"
    }
}

// Player Position and Look
34: {
    double "X"
    double "Y"
    double "Z"
    float "Yaw"
    float "Pitch"
    byte "Flags"
    varint "Teleport ID"
}

// Unlock Recipes

// Destroy Entities
36: {
    varint "Count"
    varint["Count"] => "Entity IDs"
}

// Remove Entity Effect
37: {
    varint "Entity ID"
    byte "Effect ID"
}

// Resource Pack Send
38: {
    string "URL"
    string "Hash"
}

// Respawn
39: {
    nbt "Dimension"
    identifier "World Name"
    long "Hashed Seed"
    byte "Gamemode"
    byte "Previous Gamemode"
    boolean "Is Debug"
    boolean "Is Flat"
    boolean "Copy Metadata"
}

// Entity Head Look
3A: {
    varint "Entity ID"
    angle "Head Yaw"
}

// Multi Block Change
3B: {
    long "Chunk Section Position"
    boolean "Inverse Trust Edge"
    varint "Blocks Array Size"
    varlong["Blocks Array Size"] => "Blocks"
}

// Select Advancement Tab

// World Border
3D: {
    varint "Action"
    match "Action" {
        0 => {  // set size
            double "Diameter"
        }

        1 => { // lerp size
            double "Old Diameter"
            double "New Diameter"
            varlong "Speed"
        }

        2 => { // set center
            double "X"
            double "Z"
        }

        3 => { // initialize
            double "X"
            double "Z"
            double "Old Diameter"
            double "New Diameter"
            varlong "Speed"
            varint "Portal Teleport Boundary"
            varint "Warning Blocks"
            varint "Warning Time"
        }

        4 => { // set warning time
            varint "Warning Time"
        }

        5 => { // set warning blocks
            varint "Warning Blocks"
        }
    }
}

// Camera

// Held Item Change
3F: {
    byte "Slot"
}

// Update View Position
40: {
    varint "Chunk X"
    varint "Chunk Z"
}

// Update View Distance
41: {
    varint "View Distance"
}

// Spawn Position
// Display Scoreboard

// Entity Metadata
//44: {
//    varint "Entity ID"
//
//    byte "Index"
//    if "Index" < 255 {
//        // todo
//    }
//}

// Attach Entity 
45: {
    int "Attached Entity ID"
    int "Holding Entity ID"
}

// Entity Velocity
46: {
    varint "Entity ID"
    short "Velocity X"
    short "Velocity Y"
    short "Velocity Z"
}

// Entity Equipment
47: {
    varint "Entity ID"
    // todo: implement do while loops for that

    do {
        byte "Slot"
        boolean "Present"
        if "Present" {
            varint "Item ID"
            byte "Item Count"
            nbt "NBT"
        }
    } while "Slot" & 0x80 != 1
}

// Set Experience
// Update Health
// Scoreboard Objective

// Set Passengers
4B: {
    varint "Entity ID"
    varint "Passenger Count"
    varint["Passenger Count"] => "Passengers"
}

// Teams
// Update Score

// Time Update
4E: {
    long "World Age"
    long "Time of day"
}

// Title
// Entity Sound Effect
// Sound Effect
// Stop Sound
// Player List Header and Footer
// NBT Query Response

// Collect Item
54: {
    varint "Collected Entity ID"
    varint "Collector Entity ID"
    varint "Pickup Item Count"
}

// Entity Teleport
56: {
    varint "Entity ID"
    double "X"
    double "Y"
    double "Z"
    angle "Yaw"
    angle "Pitch"
    boolean "On Ground"
}

// Advancements

// Entity Properties
58: {
    varint "Entity ID"
    int "Number of Properties"
    array "Number of Properties" [
        identifier "Key"
        double "Value"
        varint "Number of Modifiers"
        array "Number of Modifiers" [
            uuid "UUID"
            double "Amount"
            byte "Operation"
        ]
    ]
}

// Entity Effect
59: {
    varint "Entity ID"
    byte "Effect ID"
    byte "Amplifier"
    varint "Duration"
    byte "Flags"
}

// Declare Recipes
// Tags